include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

  - project: 'ProtonVPN/qa/test-configuration'
    ref: master
    file: '/windows-config.yml'

  - local: '/.gitlab-ci-templates.yml'

  - component: $CI_SERVER_HOST/proton/devops/cicd-components/tools/artifactlift/release-candidate@0.1.20
    inputs:
      product: vpn
      platform: windows
      artifact_list: "*"
      artifact_local_directory: Setup/Installers

  - component: $CI_SERVER_HOST/proton/devops/cicd-components/tools/artifactlift/release@0.1.20
    inputs:
      product: vpn
      platform: windows
      artifact_list: ""
      artifact_metadata_path: ""
      artifact_metadata_list: ""

  - component: $CI_SERVER_HOST/proton/devops/cicd-components/devsecops/grype/scan-code@0.0.15
    inputs:
      stage: test
      cli-args: "-c .grype.yaml"

  - component: $CI_SERVER_HOST/proton/devops/cicd-components/devsecops/gitleaks/scan-repository@0.0.18
    inputs:
      stage: test

variables:
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/win-app.git
  SCREENSHOT_PATH: src/bin/e2e/TestFailureData/
  TEST_REPORT_PATH: results/
  PROJECT_ID: "13"
  MILESTONE: "Windows"
  FF_USE_FASTZIP: "true"
  TRANSFER_METER_FREQUENCY: "2s"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  CACHE_COMPRESSION_LEVEL: "fastest"
  NEXUS_GROUP_STABLE: "/Vpn/Windows/SLI/Latest/Stable"
  NEXUS_GROUP_BTI: "/Vpn/Windows/SLI/Latest/BTI"
  NEXUS_REPO: "test-productivity-builds-distribution"
  GIT_FETCH_DEFAULT_BRANCH: "yes"

stages:
  - release
  - bot # comes from translations/generator job
  - build
  - test
  - build-installer
  - publish
  - ui-test
  - generate
  - deploy
  - publish-to-slack
  - mirror
  
.unit_test_setup_script: &unit_test_setup_script
  - cmd.exe /c BuildDependencies.bat bin gosrponly
  - dotnet build src\Builds\ProtonVPN.Builds.ConsoleJob\ProtonVPN.Builds.ConsoleJob.csproj
  - echo "Injecting CI variables"
  - src\bin\ProtonVPN.Builds.ConsoleJob.exe
  - dotnet restore ProtonVpn.sln
  - dotnet build ProtonVpn.sln
  
gitleaks-scan-repository:
  allow_failure: true
  needs: []
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

grype-scan-code-dependencies:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

build-release-x64:
  extends: .build-script
  only:
    - master
    - /^release.*$/
  variables:
    TYPE: Release
    DEPENDENCIES: publish
    PLATFORM: x64
    BUILD_PATH: src/bin/win-x64/publish

build-release-arm64:
  extends: .build-script
  only:
    - master
    - /^release.*$/
  tags:
    - windows-arm64
  variables:
    TYPE: Release
    DEPENDENCIES: publish
    PLATFORM: arm64
    BUILD_PATH: src/bin/win-arm64/publish

build-bti-x64:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release.*$/'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: $BTI_SCHEDULED == "true"
      when: always
    - when: manual
  extends:
    - .build-bti-vars  
    - .build-script
  when: manual
  variables:
    TYPE: Debug
    PLATFORM: x64
    DEPENDENCIES: publish-BTI
    BUILD_PATH: src/bin/win-x64/BTI/publish

build-debug-x64:
  extends: .build-script
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    TYPE: Debug
    PLATFORM: x64
    DEPENDENCIES: publish
    BUILD_PATH: src/bin/win-x64/publish

build-debug-arm64:
  extends: .build-script
  when: manual
  except:
    - master
    - /^release.*$/
    - schedules
  tags:
    - windows-arm64
  variables:
    TYPE: Debug
    PLATFORM: arm64
    DEPENDENCIES: publish
    BUILD_PATH: src/bin/win-arm64/publish

ui-tests-group-1:
  extends: .ui_test_execution_script
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "1"
    
ui-tests-group-2:
  extends: .ui_test_execution_script
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "2"

ui-tests-full-arm:
  extends: .ui_test_execution_script
  tags:
    - windows-arm64-ui
  needs:
    - job: build-installer-debug-arm64
      optional: true
    - job: build-installer-release-arm64
      optional: true
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
    - schedules
  variables:
    CATEGORY: "ARM"

unit-tests:
  extends: 
    - .unit_test_config
  rules:
    - if: $CI_COMMIT_REF_PROTECTED != "true" && $CI_PIPELINE_SOURCE != "merge_request_event"
  script:
    - *unit_test_setup_script
    - dotnet test src\bin\*.Tests.dll --no-restore --no-build --logger "console;verbosity=normal"
  
unit-tests-with-coverage:
  extends: 
    - .unit_test_config
  rules:
    - if: $CI_COMMIT_REF_PROTECTED == "true" && $CI_PIPELINE_SOURCE != "merge_request_event"
  script:
    - *unit_test_setup_script
    - coverlet src\bin --target "dotnet" --targetargs "test src\bin\*.Tests.dll -l ""console;verbosity=normal"" --no-restore --no-build" --format cobertura --output .\coverage-reports --exclude "[*.Tests*]*" --exclude "[ProtonVPN.MarkupValidator]*" --exclude "[TestTools*]*" --exclude "[*.Installers]*"
    - powershell -Command "(gc coverage-reports.cobertura.xml) -replace '\\', '/' | Out-File -encoding UTF8 cobertura.xml"
    - ReportGenerator.exe "-reports:cobertura.xml" "-targetdir:.\code-coverage-report-html"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  coverage: '/Total.*?([0-9]{1,3}.[0-9]{1,3})%/'

build-installer-release-x64:
  needs:
    - build-release-x64
  extends: 
    - .build-installer
  only:
    - master
    - /^release.*$/
  variables:
    BUILD_PATH: src/bin/win-x64/publish
    PLATFORM: x64

build-installer-debug-x64:
  needs:
    - build-debug-x64
  extends: 
    - .build-installer
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    BUILD_PATH: src/bin/win-x64/publish
    PLATFORM: x64

build-installer-debug-arm64:
  needs:
    - build-debug-arm64
  extends: 
    - .build-installer
  except:
    - master
    - /^release.*$/
    - schedules
  variables:
    BUILD_PATH: src/bin/win-arm64/publish
    PLATFORM: arm64

build-installer-release-arm64:
  needs:
    - build-release-arm64
  extends: 
    - .build-installer
  only:
    - master
    - /^release.*$/
  variables:
    BUILD_PATH: src/bin/win-arm64/publish
    PLATFORM: arm64

build-BTI-installer-x64:
  needs:
    - build-bti-x64
  except:
    - master
    - /^release.*$/
  extends: 
    - .build-installer
  variables:
    BUILD_PATH: src/bin/win-x64/BTI/publish
    PLATFORM: x64

prepare-internal-beta-release:
  stage: publish
  tags:
    - windows-dot-net
  when: manual
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\test-scripts\prepare-internal-beta.py
  only:
    - /^release.*$/
    
publish prod release nexus:
  stage: publish
  only:
    - /^release\/\d+\.\d+\.\d+/
  except:
    - release/9.9.9
  tags:
    - shared-medium
  image: $CI_REGISTRY/tpe/test-scripts
  allow_failure: true
  dependencies:
    - build-installer-release-x64
  needs:
    - build-installer-release-x64
  script:
    # Delete old assets
    - /usr/local/bin/nexus/delete_asset_on_nexus.py
      --repository $NEXUS_REPO
      --group $NEXUS_GROUP_STABLE
    # Upload release build
    - /usr/local/bin/nexus/upload_to_nexus.py
      --path "Setup/Installers/ProtonVPN_*.exe"
      --repository $NEXUS_REPO
      --group $NEXUS_GROUP_STABLE
      --filename "vpn_windows_latest.exe"

mirror:
  stage: mirror
  tags:
    - windows
  only:
    refs:
      - tags
      - master
  script:
    - python ci\build-scripts\main.py prepare-ssh $env:SSH_PRIVATE_KEY
    - ssh-keyscan -t rsa github.com | Set-Content "$env:userprofile\.ssh\known_hosts"
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    - git push public "$(git describe --abbrev=0)"

i18n-sync-crowdin-redesign_2024:
  extends: .i18n-sync-crowdin-common
  when: manual
  variables:
    I18N_SYNC_BRANCH: 'redesign'
    L10N_COMMUNITY_BRANCH_SCOPE: 'Redesign_2024'
    I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn-redesign'

i18n-commit-translations-redesign_2024:
  extends: .i18n-commit-locales-shared
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: 'windows-vpn-redesign'
    I18N_COMMIT_BRANCH_PUSH: redesign
    I18N_COMMIT_BRANCH_ALLOWED: redesign
  before_script:
    - git config --global core.autocrlf false

create-release:
  image: $HARBOR_URL/docker.io/library/python:latest
  stage: release
  tags:
    - shared-small
  when: manual
  only:
    refs:
      - develop
      - redesign
  script:
    - apt-get update && apt-get install -y python3 python3-pip git
    - python3 ci/build-scripts/release.py

send-slack-notification:
  tags:
    - windows-dot-net
  only:
    refs:
      - develop
      - redesign
  stage: publish-to-slack
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\build-scripts\main.py send-slack-notification

generate-release-artifacts:
  stage: generate
  image: harbor.protontech.ch/docker.io/library/alpine:3.20
  needs:
    - build-installer-release-x64
    - build-installer-release-arm64
  tags:
    - shared-small
  script:
    - set -ex
    - export RELEASE_VERSION="${CI_COMMIT_BRANCH##release/}" && echo "RELEASE_VERSION=${RELEASE_VERSION}" | tee release.env
    - echo "ARTIFACT_LIST=ProtonVPN_v${RELEASE_VERSION}_x64.exe ProtonVPN_v${RELEASE_VERSION}_arm64.exe" | tee -a release.env
  artifacts:
    reports:
      dotenv: release.env
  only:
    - /^release.*$/

artifactlift-release-candidate-artifacts:
  rules:
    - when: never

artifactlift-release-artifacts:
  rules:
    - when: never

release-binary-to-nexus:
  needs:
    - generate-release-artifacts
    - job: build-installer-release-x64
      artifacts: true
    - job: build-installer-release-arm64
      artifacts: true
  extends: artifactlift-release-candidate-artifacts
  rules:
    - if: '$CI_COMMIT_BRANCH == "release/9.9.9"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release\/\d+\.\d+\.\d+/'
      when: manual
    - when: never

release-binary-to-prod:
  extends: artifactlift-release-artifacts
  needs:
    - job: generate-release-artifacts
      artifacts: true
    - release-binary-to-nexus
  rules:
    - if: '$CI_COMMIT_BRANCH == "release/9.9.9"'
      when: never
    - if: '$CI_COMMIT_BRANCH =~ /^release\/\d+\.\d+\.\d+/'
      when: manual
    - when: never

report-test-failure:
  stage: publish-to-slack
  image: $CI_REGISTRY/tpe/test-scripts
  tags:
    - shared-medium
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: on_failure
    - when: never
  script:
    - reporter.py --message "Scheduled BTI test job failed!" --slack-channel "$SLACK_REPORT_CHANNEL" --platform windows --job-name "Windows BTI" --job-url "$CI_PIPELINE_URL"