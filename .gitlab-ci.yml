include:
  - project: 'translations/generator'
    ref: master
    file: '/jobs/commit-locales.gitlab-ci.yml'

  - project: 'translations/generator'
    ref: master
    file: '/jobs/sync-crowdin.gitlab-ci.yml'

variables:
  PUBLIC_REPO_URL: git@github.com:ProtonVPN/win-app.git
  SCREENSHOT_PATH: src/bin/TestFailureData/
  TEST_REPORT_PATH: results/
  PROJECT_ID: "13"
  MILESTONE: "Windows"
  FF_USE_FASTZIP: "true"
  TRANSFER_METER_FREQUENCY: "2s"
  ARTIFACT_COMPRESSION_LEVEL: "fastest"
  CACHE_COMPRESSION_LEVEL: "fastest"

stages:
  - release
  - bot # comes from translations/generator job
  - build
  - test
  - build-installer
  - internal-beta
  - ui-test
  - publish-to-slack
  - mirror

build-release:
  stage: build
  tags:
    - windows-dot-net
  script:
    - echo "Building native dependencies..."
    - 'c:\nuget\nuget.exe restore ProtonVPN.InstallActions.sln'
    - cmd.exe /c BuildDependencies.bat publish
    - dotnet publish src\ProtonVPN.MarkupValidator\ProtonVPN.MarkupValidator.csproj --arch x64 -c Release --no-self-contained -o src\bin\
    - echo "Downloading translations from crowdin..."
    - python ci\build-scripts\main.py lint-languages
    - python ci\build-scripts\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - python ci\build-scripts\main.py defaultConfig
    - echo "Publishing release..."
    - cmd.exe /c Publish.bat Release
  artifacts:
    expire_in: 1 day
    paths:
      - publish
  only:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

build-debug:
  stage: build
  tags:
    - windows-dot-net
  script:
    - echo "Building native dependencies..."
    - 'c:\nuget\nuget.exe restore ProtonVPN.InstallActions.sln'
    - cmd.exe /c BuildDependencies.bat publish
    - dotnet build src\ProtonVPN.MarkupValidator\ProtonVPN.MarkupValidator.csproj --arch x64 -c Release
    - echo "Downloading translations from crowdin..."
    - python ci\build-scripts\main.py lint-languages
    - python ci\build-scripts\main.py add-commit-hash $env:CI_COMMIT_SHORT_SHA
    - python ci\build-scripts\main.py defaultConfig
    - echo "Publishing debug..."
    - cmd.exe /c Publish.bat Debug
  artifacts:
    expire_in: 1 day
    paths:
      - publish
  except:
    - master
    - /^release.*$/
  variables:
    GIT_SUBMODULE_STRATEGY: normal

tests:
  stage: test
  tags:
    - windows-dot-net
  script:
    - cmd.exe /c BuildDependencies.bat bin gosrponly
    - dotnet restore ProtonVpn.sln
    - dotnet build ProtonVpn.sln
    - coverlet src\bin --target "dotnet" --targetargs "test src\bin\*.Tests.dll -l ""console;verbosity=normal"" --filter ""TestCategory!=UI&TestCategory!=Connection"" --no-restore --no-build" --format cobertura --output .\coverage-reports --exclude "[*.Tests*]*" --exclude "[ProtonVPN.MarkupValidator]*" --exclude "[TestTools*]*" --exclude "[*.Installers]*"
    - powershell -Command "(gc coverage-reports.cobertura.xml) -replace '\\', '/' | Out-File -encoding UTF8 cobertura.xml"
    - ReportGenerator.exe "-reports:cobertura.xml" "-targetdir:.\code-coverage-report-html"
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
  needs: []
  coverage: '/Total.*?([0-9]{1,3}.[0-9]{1,3})%/'
  variables:
    GIT_SUBMODULE_STRATEGY: normal

build-installer-for-release:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\build-scripts\main.py update-gh-list
    - python ci\build-scripts\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/Installers/
    expire_in: 4 weeks
  only:
    - master
    - /^release.*$/

prepare-internal-beta-release:
  stage: internal-beta
  tags:
    - windows-dot-net
  when: manual
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\test-scripts\prepare-internal-beta.py
  only:
    - /^release.*$/

build-installer-for-debug:
  stage: build-installer
  tags:
    - windows
  script:
    - python ci\build-scripts\main.py update-gh-list
    - python ci\build-scripts\main.py app-installer $env:CI_COMMIT_SHORT_SHA
  artifacts:
    paths:
      - Setup/Installers/
    expire_in: 4 weeks
  except:
    - master
    - /^release.*$/
    
ui-test:
  stage: ui-test
  dependencies:
    - build-installer-for-debug
    - build-installer-for-release
  tags:
    - e2e-tests
  script:
    - ci\test-scripts\uninstall-app.ps1
    - ci\test-scripts\install-the-app.ps1
    - dotnet build src/Tests/ProtonVPN.UI.Tests/ProtonVPN.UI.Tests.csproj --arch x64 -o src/bin
    - VSTest.Console.exe src\bin\ProtonVPN.UI.Tests.dll /Settings:ci/test-scripts/TestRun/test-run-settings.xml /TestCaseFilter:"Category=UI"
    - ci\test-scripts\uninstall-app.ps1
  after_script:
    - powershell.exe ./ci/test-scripts/TestRun/converter-nunit-junit.ps1
  except:
    - /^debug.*$/
    - release/9.9.9
    - master
  artifacts:
    when: always
    name: "result-ui"
    paths:
      - $SCREENSHOT_PATH
      - "results/*"
    expire_in: 1 weeks


mirror:
  stage: mirror
  tags:
    - windows
  only:
    refs:
      - tags
      - master
  script:
    - python ci\build-scripts\main.py prepare-ssh $env:SSH_PRIVATE_KEY
    - ssh-keyscan -t rsa github.com | Set-Content "$env:userprofile\.ssh\known_hosts"
    - git clone "$CI_REPOSITORY_URL" --branch master _APP_CLONE;
    - cd _APP_CLONE
    - git remote add public $PUBLIC_REPO_URL
    - git push public master
    - git push public "$(git describe --abbrev=0)"

i18n-sync-crowdin:
  when: manual
  variables:
    I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

i18n-manual-sync-crowdin:
  when: manual
  only:
    - branches
  variables:
    I18N_SYNC_CROWDIN_PROJECT: 'windows-vpn'
  extends: .i18n-sync-crowdin-common

i18n-commit-translations:
  extends: .i18n-commit-locales-shared
  variables:
    I18N_COMMIT_CROWDIN_PROJECT: 'windows-vpn'
  before_script:
    - git config --global core.autocrlf false

create-release:
  image: debian:stable-slim
  stage: release
  when: manual
  only:
    refs:
      - develop
  script:
    - apt-get update && apt-get install -y python3 python3-pip git
    - python3 ci/build-scripts/release.py

send-slack-notification:
  tags:
    - windows
  only:
    refs:
      - develop
      - redesign
  stage: publish-to-slack
  script:
    - python -m pip install -r ci\python-libs.txt
    - python ci\build-scripts\main.py send-slack-notification