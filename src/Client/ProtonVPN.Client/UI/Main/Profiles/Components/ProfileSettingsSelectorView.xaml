<?xml version="1.0" encoding="utf-8" ?>
<!--
Copyright (c) 2024 Proton AG

This file is part of ProtonVPN.

ProtonVPN is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ProtonVPN is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
-->

<UserControl x:Class="ProtonVPN.Client.UI.Main.Profiles.Components.ProfileSettingsSelectorView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:controls="using:CommunityToolkit.WinUI.Controls"
             xmlns:custom="using:ProtonVPN.Client.Common.UI.Controls.Custom"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:pathicons="using:ProtonVPN.Client.Common.UI.Assets.Icons.PathIcons"
             xmlns:settings="using:ProtonVPN.Client.Models.Settings"
             xmlns:protocols="using:ProtonVPN.Common.Core.Networking"
             x:DefaultBindMode="OneWay"
             mc:Ignorable="d">

    <UserControl.Resources>
        <Style x:Key="DropDownGhostButtonStyle" BasedOn="{StaticResource SecondaryGhostButtonStyle}" TargetType="custom:GhostButton">
            <Setter Property="Background" Value="{ThemeResource InteractionDefaultColorBrush}" />
            <Setter Property="Padding" Value="4,2" />
        </Style>
    </UserControl.Resources>

    <controls:SettingsExpander Description="{x:Bind ViewModel.Localizer.Get('Profile_CustomSettings_Description')}"
                               Header="{x:Bind ViewModel.Localizer.Get('Profile_CustomSettings_Header')}"
                               IsExpanded="{x:Bind ViewModel.IsCustomSettingsSectionExpanded}"
                               Expanded="OnSettingsExpanded"
                               Style="{StaticResource ProfileSettingsExpanderStyle}">
        <controls:SettingsExpander.Items>

            <controls:SettingsExpander HorizontalAlignment="Stretch"
                                       Description="{x:Bind ViewModel.Localizer.Get('Settings_Connection_NetShield_Description')}"
                                       Header="{x:Bind ViewModel.Localizer.Get('Settings_Connection_NetShield')}"
                                       IsExpanded="{x:Bind ViewModel.SelectedNetShieldMode.IsEnabled}"
                                       Style="{StaticResource SettingsExpanderStyle}">
                <custom:GhostButton AutomationProperties.AutomationId="NetShieldDropDown" 
                                    Content="{x:Bind ViewModel.SelectedNetShieldMode.ShortHeader}"
                                    Style="{StaticResource DropDownGhostButtonStyle}">
                    <custom:GhostButton.LeftIcon>
                        <ImageIcon Width="16"
                                   Height="16"
                                   Source="{x:Bind ViewModel.SelectedNetShieldMode.IllustrationSource}" />
                    </custom:GhostButton.LeftIcon>
                    <custom:GhostButton.RightIcon>
                        <pathicons:ChevronTinyDown Size="Pixels16" />
                    </custom:GhostButton.RightIcon>
                    <custom:GhostButton.Flyout>
                        <MenuFlyout Placement="BottomEdgeAlignedRight">
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="NetShieldOffMenuItem" 
                                                              Command="{x:Bind ViewModel.DisableNetShieldCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedNetShieldMode.IsEnabled, Converter={StaticResource NotBooleanToBooleanConverter}}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Common_States_Off')}">
                                <custom:ActivatableMenuFlyoutItem.Icon>
                                    <ImageIcon Source="{ThemeResource NetShieldOffIllustrationSource}" />
                                </custom:ActivatableMenuFlyoutItem.Icon>
                            </custom:ActivatableMenuFlyoutItem>
                            <MenuFlyoutSeparator />
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="NetShieldLevelOneMenuItem" 
                                                              Command="{x:Bind ViewModel.EnableStandardNetShieldCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedNetShieldMode.IsStandardNetShieldEnabled}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Settings_Connection_NetShield_BlockMalwareOnly')}">
                                <custom:ActivatableMenuFlyoutItem.Icon>
                                    <ImageIcon Source="{ThemeResource NetShieldOnLevel1IllustrationSource}" />
                                </custom:ActivatableMenuFlyoutItem.Icon>
                            </custom:ActivatableMenuFlyoutItem>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="NetShieldLevelTwoMenuItem" 
                                                              Command="{x:Bind ViewModel.EnableAdvancedNetShieldCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedNetShieldMode.IsAdvancedNetShieldEnabled}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Settings_Connection_NetShield_BlockAdsMalwareTrackers')}">
                                <custom:ActivatableMenuFlyoutItem.Icon>
                                    <ImageIcon Source="{ThemeResource NetShieldOnLevel2IllustrationSource}" />
                                </custom:ActivatableMenuFlyoutItem.Icon>
                            </custom:ActivatableMenuFlyoutItem>
                        </MenuFlyout>
                    </custom:GhostButton.Flyout>
                </custom:GhostButton>

                <controls:SettingsExpander.Items>
                    <Grid ColumnSpacing="8">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <pathicons:InfoCircle Grid.Column="0"
                                              VerticalAlignment="Top"
                                              Foreground="{ThemeResource TextWeakColorBrush}"
                                              Size="Pixels16" />

                        <TextBlock Grid.Column="1"
                                   Style="{StaticResource CaptionTextBlockStyle}"
                                   TextWrapping="Wrap">
                            <Run Foreground="{ThemeResource TextWeakColorBrush}"
                                 Text="{x:Bind ViewModel.Localizer.Get('Settings_Connection_NetShield_Conflict_Information')}" />
                            <Hyperlink NavigateUri="{x:Bind ViewModel.NetShieldLearnMoreUrl, Mode=OneTime}"
                                       ToolTipService.ToolTip="{x:Bind ViewModel.NetShieldLearnMoreUrl, Mode=OneTime}">
                                <Run Text="{x:Bind ViewModel.Localizer.Get('Common_Links_LearnMore')}" />
                            </Hyperlink>
                            <!-- Trailing empty run helps containing the hyperlink. Otherwise the clickable area of the hyperlink expands to the full line. -->
                            <Run/>
                        </TextBlock>
                    </Grid>
                </controls:SettingsExpander.Items>
            </controls:SettingsExpander>

            <controls:SettingsCard HorizontalAlignment="Stretch"
                                   Description="{x:Bind ViewModel.Localizer.Get('Settings_Connection_PortForwarding_Description')}"
                                   Header="{x:Bind ViewModel.Localizer.Get('Settings_Connection_PortForwarding')}"
                                   Style="{StaticResource DefaultSettingsCardStyle}">
                <custom:GhostButton AutomationProperties.AutomationId="PortForwardingDropDown" 
                                    Content="{x:Bind ViewModel.SelectedPortForwardingState.Header}"
                                    Style="{StaticResource DropDownGhostButtonStyle}">
                    <custom:GhostButton.LeftIcon>
                        <ImageIcon Width="16"
                                   Height="16"
                                   Source="{x:Bind ViewModel.SelectedPortForwardingState.IllustrationSource}" />
                    </custom:GhostButton.LeftIcon>
                    <custom:GhostButton.RightIcon>
                        <pathicons:ChevronTinyDown Size="Pixels16" />
                    </custom:GhostButton.RightIcon>
                    <custom:GhostButton.Flyout>
                        <MenuFlyout Placement="BottomEdgeAlignedRight">
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="PortForwardingOffMenuItem" 
                                                              Command="{x:Bind ViewModel.DisablePortForwardingCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedPortForwardingState.IsEnabled, Converter={StaticResource NotBooleanToBooleanConverter}}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Common_States_Off')}">
                                <custom:ActivatableMenuFlyoutItem.Icon>
                                    <ImageIcon Source="{ThemeResource PortForwardingOffIllustrationSource}" />
                                </custom:ActivatableMenuFlyoutItem.Icon>
                            </custom:ActivatableMenuFlyoutItem>
                            <MenuFlyoutSeparator />
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="PortForwardingOnMenuItem" 
                                                              Command="{x:Bind ViewModel.EnablePortForwardingCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedPortForwardingState.IsEnabled}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Common_States_On')}">
                                <custom:ActivatableMenuFlyoutItem.Icon>
                                    <ImageIcon Source="{ThemeResource PortForwardingOnIllustrationSource}" />
                                </custom:ActivatableMenuFlyoutItem.Icon>
                            </custom:ActivatableMenuFlyoutItem>
                        </MenuFlyout>
                    </custom:GhostButton.Flyout>
                </custom:GhostButton>
            </controls:SettingsCard>

            <controls:SettingsCard HorizontalAlignment="Stretch"
                                   Description="{x:Bind ViewModel.Localizer.Get('Settings_Protocols_Explanation')}"
                                   Header="{x:Bind ViewModel.Localizer.Get('Settings_Connection_Protocol')}"
                                   Style="{StaticResource DefaultSettingsCardStyle}">
                <custom:GhostButton AutomationProperties.AutomationId="ProtocolsDropDown" 
                                    Content="{x:Bind ViewModel.SelectedProtocol.Header}"
                                    Style="{StaticResource DropDownGhostButtonStyle}">
                    <custom:GhostButton.RightIcon>
                        <pathicons:ChevronTinyDown Size="Pixels16" />
                    </custom:GhostButton.RightIcon>
                    <custom:GhostButton.Flyout>
                        <MenuFlyout Placement="BottomEdgeAlignedRight">
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="SmartProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectSmartProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsSmartProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_Smart')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="WireGuardUdpProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectWireGuardUdpProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsWireGuardUdpProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_WireGuard_Udp')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="WireGuardTcpProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectWireGuardTcpProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsWireGuardTcpProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_WireGuard_Tcp')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="WireGuardTlsProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectWireGuardTlsProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsWireGuardTlsProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_WireGuard_Tls')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="OpenVpnUdpProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectOpenVpnUdpProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsOpenVpnUdpProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_OpenVPN_Udp')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="OpenVpnTcpProtocolMenuItem" 
                                                              Command="{x:Bind ViewModel.SelectOpenVpnTcpProtocolCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedProtocol.IsOpenVpnTcpProtocol}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('VpnProtocol_OpenVPN_Tcp')}"/>
                        </MenuFlyout>
                    </custom:GhostButton.Flyout>
                </custom:GhostButton>
            </controls:SettingsCard>

            <controls:SettingsCard HorizontalAlignment="Stretch"
                                   Description="{x:Bind ViewModel.Localizer.Get('Settings_Connection_Advanced_NatType_Description')}"
                                   Header="{x:Bind ViewModel.Localizer.Get('Settings_Connection_Advanced_NatType')}"
                                   Style="{StaticResource DefaultSettingsCardStyle}">
                <custom:GhostButton AutomationProperties.AutomationId="NatTypeDropDown" 
                                    Content="{x:Bind ViewModel.SelectedNatType.Header}"
                                    Style="{StaticResource DropDownGhostButtonStyle}">
                    <custom:GhostButton.RightIcon>
                        <pathicons:ChevronTinyDown Size="Pixels16" />
                    </custom:GhostButton.RightIcon>
                    <custom:GhostButton.Flyout>
                        <MenuFlyout Placement="BottomEdgeAlignedRight">
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="StrictNatMenuItem" 
                                                              Command="{x:Bind ViewModel.EnableStrictNatCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedNatType.IsStrictNat}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Settings_Connection_Advanced_NatType_Strict')}"/>
                            <custom:ActivatableMenuFlyoutItem AutomationProperties.AutomationId="ModerateNatMenuItem" 
                                                              Command="{x:Bind ViewModel.EnableModerateNatCommand, Mode=OneTime}"
                                                              IsActive="{x:Bind ViewModel.SelectedNatType.IsModerateNat}"
                                                              Text="{x:Bind ViewModel.Localizer.Get('Settings_Connection_Advanced_NatType_Moderate')}"/>
                        </MenuFlyout>
                    </custom:GhostButton.Flyout>
                </custom:GhostButton>
            </controls:SettingsCard>

        </controls:SettingsExpander.Items>

        <custom:GhostButton x:Name="ToggleExpanderButton"
                            Command="{x:Bind ViewModel.ToggleExpanderCommand, Mode=OneTime}"
                            Content="{x:Bind ViewModel.Localizer.Get('Profile_CustomSettings_Show')}">
            <custom:GhostButton.RightIcon>
                <pathicons:ChevronDownFilled Size="Pixels16" />
            </custom:GhostButton.RightIcon>
        </custom:GhostButton>

        <VisualStateManager.VisualStateGroups>
            <VisualStateGroup x:Name="ExpanderStates">
                <VisualState x:Name="Expanded">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsCustomSettingsSectionExpanded}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="ToggleExpanderButton.Content" Value="{x:Bind ViewModel.Localizer.Get('Profile_CustomSettings_Hide')}" />
                        <Setter Target="ToggleExpanderButton.RightIcon">
                            <Setter.Value>
                                <pathicons:ChevronUpFilled Size="Pixels16" />
                            </Setter.Value>
                        </Setter>
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Collapsed" />
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </controls:SettingsExpander>

</UserControl>