<?xml version="1.0" encoding="utf-8" ?>
<!--
Copyright (c) 2024 Proton AG

This file is part of ProtonVPN.

ProtonVPN is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

ProtonVPN is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
-->

<Page x:Class="ProtonVPN.Client.UI.Main.MainPageView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:controls="using:CommunityToolkit.WinUI.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:map="using:ProtonVPN.Client.UI.Main.Map"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:sidebar="using:ProtonVPN.Client.UI.Main.Sidebar"
      xmlns:widgets="using:ProtonVPN.Client.UI.Main.Widgets"
      x:DefaultBindMode="OneWay"
      AutomationProperties.AutomationId="MainPage"
      AutomationProperties.Name="{x:Bind ViewModel.Localizer.Get('Automation_Properties_Main_Page')}"
      NavigationCacheMode="Required"
      mc:Ignorable="d">

    <Page.Resources>
        <x:Double x:Key="ConnectionStatusGradientHeight">332.0</x:Double>
        <x:Double x:Key="BottomMapFadeoutGradientHeight">250.0</x:Double>

        <x:Double x:Key="WidgetComponentMinWidth">62.0</x:Double>
        <x:Double x:Key="WidgetComponentMaxWidth">120.0</x:Double>

        <x:Double x:Key="SidebarComponentCompactWidth">62.0</x:Double>
        <x:Double x:Key="SidebarComponentMinWidth">200.0</x:Double>
        <x:Double x:Key="SidebarComponentMaxWidth">400.0</x:Double>
        <x:Double x:Key="SidebarComponentDefaultWidth">280.0</x:Double>

        <Duration x:Key="ConnectionStatusBackgroundAnimationDuration">0:0:1</Duration>
        
    </Page.Resources>

    <Grid x:Name="LayoutRoot"
          Background="{ThemeResource TransparentColorBrush}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition x:Name="SidebarColumn"/>
            <ColumnDefinition Width="*" />
            <ColumnDefinition x:Name="WidgetsColumn" />
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="{Binding Source={StaticResource MainTitleBarHeight}, Converter={StaticResource DoubleToPixelGridLengthConverter}}" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <map:MapComponentView x:Name="MapView"
                              Grid.Row="1"
                              Grid.Column="1" />

        <Grid Grid.Row="0"
              Grid.RowSpan="2"
              Grid.Column="0"
              Grid.ColumnSpan="3">

            <Border Height="{StaticResource BottomMapFadeoutGradientHeight}"
                    VerticalAlignment="Bottom"
                    Background="{ThemeResource ReverseGradientFadingColorBrush}" />

            <Grid Height="{StaticResource ConnectionStatusGradientHeight}"
                  VerticalAlignment="Top">

                <Border Background="{ThemeResource GradientFadingColorBrush}" />
                <Border x:Name="StatusGradient"
                        Background="{ThemeResource GradientUnprotectedColorBrush}" />

            </Grid>
        </Grid>

        <Grid Grid.Row="1"
              Grid.Column="0"
              Grid.ColumnSpan="3"
              Margin="8,0,8,8"
              ColumnSpacing="8">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <SplitView x:Name="MainSplitView"
                       Grid.Row="0"
                       CompactPaneLength="{StaticResource SidebarComponentCompactWidth}"
                       DisplayMode="{x:Bind ViewModel.SidebarDisplayMode}"
                       IsPaneOpen="{x:Bind ViewModel.IsSidebarExpanded, Mode=TwoWay}"
                       OpenPaneLength="{x:Bind ViewModel.SidebarWidth}"
                       PaneBackground="{ThemeResource TransparentColorBrush}"
                       PaneClosing="OnSidebarPaneClosing"
                       PaneOpening="OnSidebarPaneOpening">

                <SplitView.Pane>
                    <sidebar:SidebarComponentView x:Name="SidebarComponent"
                                                  Grid.Column="0"
                                                  Canvas.ZIndex="2"
                                                  IsSidebarExpanded="{x:Bind ViewModel.IsSidebarExpanded}"
                                                  PointerEntered="OnSidebarPointerEntered"
                                                  PointerExited="OnSidebarPointerExited"
                                                  SizeChanged="OnSidebarComponentSizeChanged"/>
                </SplitView.Pane>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Border Grid.Column="0"
                            Width="8">
                        <controls:PropertySizer Binding="{x:Bind ViewModel.SidebarWidth, Mode=TwoWay}"
                                                Maximum="{StaticResource SidebarComponentMaxWidth}"
                                                Minimum="{StaticResource SidebarComponentMinWidth}"
                                                Visibility="{x:Bind ViewModel.IsSidebarExpanded}" 
                                                Margin="-8,0,0,0"/>
                    </Border>

                    <Frame x:Name="MainNavigationFrame"
                           Grid.Column="1"
                           IsNavigationStackEnabled="{x:Bind Navigator.IsNavigationStackEnabled}" />
                </Grid>

            </SplitView>

            <widgets:SideWidgetsHostComponentView x:Name="SideWidgetsHostComponent" 
                                                  SizeChanged="OnSideWidgetsHostComponentSizeChanged"
                                                  Grid.Column="1"
                                                  Canvas.ZIndex="2" />

        </Grid>

        <VisualStateManager.VisualStateGroups>

            <VisualStateGroup x:Name="ConnectionStates">

                <VisualState x:Name="Connecting">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsConnecting}" />
                    </VisualState.StateTriggers>
                    <Storyboard>
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)"
                                        To="{ThemeResource GradientConnectingStartColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)"
                                        To="{ThemeResource GradientConnectingEndColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                    </Storyboard>
                </VisualState>

                <VisualState x:Name="Connected">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsConnected}" />
                    </VisualState.StateTriggers>
                    <Storyboard>
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)"
                                        To="{ThemeResource GradientProtectedStartColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)"
                                        To="{ThemeResource GradientProtectedEndColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                    </Storyboard>
                </VisualState>

                <VisualState x:Name="Disconnected">
                    <VisualState.StateTriggers>
                        <!--  This is the default visual state. when no other visual state is active, this one kicks in  -->
                        <StateTrigger IsActive="True" />
                    </VisualState.StateTriggers>
                    <Storyboard>
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[0].(GradientStop.Color)"
                                        To="{ThemeResource GradientUnprotectedStartColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                        <ColorAnimation EnableDependentAnimation="True"
                                        Storyboard.TargetName="StatusGradient"
                                        Storyboard.TargetProperty="(Border.Background).(LinearGradientBrush.GradientStops)[1].(GradientStop.Color)"
                                        To="{ThemeResource GradientUnprotectedEndColor}"
                                        Duration="{StaticResource ConnectionStatusBackgroundAnimationDuration}" />
                    </Storyboard>
                </VisualState>

            </VisualStateGroup>

            <VisualStateGroup x:Name="NavigationStates">
                <VisualState x:Name="NotOnHomePage">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsHomePageDisplayed, Converter={StaticResource NotBooleanToBooleanConverter}}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SidebarComponent.IsEnabled" Value="False" />
                        <Setter Target="SideWidgetsHostComponent.IsEnabled" Value="False" />
                        <Setter Target="MapView.Opacity" Value="0.4" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="OnHomePage">
                    <VisualState.StateTriggers>
                        <StateTrigger IsActive="{x:Bind ViewModel.IsHomePageDisplayed}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SidebarComponent.IsEnabled" Value="True" />
                        <Setter Target="SideWidgetsHostComponent.IsEnabled" Value="True" />
                        <Setter Target="MapView.Opacity" Value="1" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <VisualStateGroup x:Name="SidebarStates">
                <VisualState x:Name="Expanded">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{x:Bind ViewModel.SidebarWindowWidthThreshold, Mode=OneTime}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainSplitView.IsPaneOpen" Value="True" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="Collapsed">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="MainSplitView.IsPaneOpen" Value="False" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>

            <VisualStateGroup x:Name="WidgetComponentStates">
                <VisualState x:Name="IconsAndLabels">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="{x:Bind ViewModel.WidgetsWindowWidthThreshold, Mode=OneTime}" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SideWidgetsHostComponent.Width" Value="{StaticResource WidgetComponentMaxWidth}" />
                    </VisualState.Setters>
                </VisualState>
                <VisualState x:Name="IconsOnly">
                    <VisualState.StateTriggers>
                        <AdaptiveTrigger MinWindowWidth="0" />
                    </VisualState.StateTriggers>
                    <VisualState.Setters>
                        <Setter Target="SideWidgetsHostComponent.Width" Value="{StaticResource WidgetComponentMinWidth}" />
                    </VisualState.Setters>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>
    </Grid>

</Page>