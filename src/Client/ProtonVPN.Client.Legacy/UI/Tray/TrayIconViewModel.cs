/*
 * Copyright (c) 2023 Proton AG
 *
 * This file is part of ProtonVPN.
 *
 * ProtonVPN is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * ProtonVPN is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ProtonVPN.  If not, see <https://www.gnu.org/licenses/>.
 */

using CommunityToolkit.Mvvm.Input;
using Microsoft.UI.Xaml.Media;
using ProtonVPN.Client.Legacy.Contracts;
using ProtonVPN.Client.Legacy.Contracts.ViewModels;
using ProtonVPN.Client.EventMessaging.Contracts;
using ProtonVPN.Client.Localization.Contracts;
using ProtonVPN.Client.Logic.Auth.Contracts;
using ProtonVPN.Client.Logic.Auth.Contracts.Messages;
using ProtonVPN.Client.Logic.Connection.Contracts;
using ProtonVPN.Client.Logic.Connection.Contracts.GuestHole;
using ProtonVPN.Client.Logic.Connection.Contracts.Messages;
using ProtonVPN.Client.Logic.Connection.Contracts.Models.Intents;
using ProtonVPN.Client.Logic.Recents.Contracts;
using ProtonVPN.Client.Legacy.Models.Activation;
using ProtonVPN.Client.Legacy.Models.Icons;
using ProtonVPN.Common.Core.Helpers;
using ProtonVPN.IssueReporting.Contracts;
using ProtonVPN.Logging.Contracts;

namespace ProtonVPN.Client.Legacy.UI.Tray;

public partial class TrayIconViewModel : 
    ViewModelBase, 
    IEventMessageReceiver<ConnectionStatusChangedMessage>, 
    IEventMessageReceiver<LoggedInMessage>, 
    IEventMessageReceiver<LoggedOutMessage>
{
    private readonly IMainWindowActivator _mainWindowActivator;
    private readonly IRecentConnectionsManager _recentConnectionsManager;
    private readonly IConnectionManager _connectionManager;
    private readonly IUserAuthenticator _userAuthenticator;
    private readonly IOverlayActivator _overlayActivator;
    private readonly IGuestHoleManager _guestHoleManager;
    private readonly IApplicationIconSelector _applicationIconSelector;

    public ImageSource IconSource => _applicationIconSelector.Get();

    // GUID value generated by hashing "ProtonVPN" with SHA1 and taking first 16 bytes
    public Guid TrayIconGuid => OSVersion.IsWindows11OrHigher() ? new("{50487227-4f3b-071d-baec-cd22bfff900d}") : Guid.Empty;

    public string OpenApplicationLabel => Localizer.GetFormat("Tray_Actions_OpenApplication", App.APPLICATION_NAME);

    public TrayIconViewModel(
        ILocalizationProvider localizationProvider,
        IMainWindowActivator mainWindowActivator,
        IRecentConnectionsManager recentConnectionsManager,
        IConnectionManager connectionManager,
        IUserAuthenticator userAuthenticator,
        ILogger logger,
        IIssueReporter issueReporter,
        IOverlayActivator overlayActivator,
        IGuestHoleManager guestHoleManager,
        IApplicationIconSelector applicationIconSelector)
        : base(localizationProvider, logger, issueReporter)
    {
        _mainWindowActivator = mainWindowActivator;
        _recentConnectionsManager = recentConnectionsManager;
        _connectionManager = connectionManager;
        _userAuthenticator = userAuthenticator;
        _overlayActivator = overlayActivator;
        _guestHoleManager = guestHoleManager;
        _applicationIconSelector = applicationIconSelector;
    }

    [RelayCommand]
    public void ShowApplication()
    {
        _mainWindowActivator.Activate();
    }

    [RelayCommand]
    public async Task ExitApplicationAsync()
    {
        await _mainWindowActivator.TryExitAsync();
    }

    [RelayCommand(CanExecute = nameof(CanConnect))]
    public async Task ConnectAsync()
    {
        IConnectionIntent defaultConnectionIntent = _recentConnectionsManager.GetDefaultConnection();

        await _connectionManager.ConnectAsync(defaultConnectionIntent);
    }

    [RelayCommand(CanExecute = nameof(CanDisconnect))]
    public async Task DisconnectAsync()
    {
        await _connectionManager.DisconnectAsync();
    }

    public void Receive(ConnectionStatusChangedMessage message)
    {
        ExecuteOnUIThread(InvalidateTray);
    }

    public void Receive(LoggedInMessage message)
    {
        ExecuteOnUIThread(InvalidateTray);
    }

    public void Receive(LoggedOutMessage message)
    {
        ExecuteOnUIThread(InvalidateTray);
    }

    protected override void OnLanguageChanged()
    {
        base.OnLanguageChanged();

        OnPropertyChanged(nameof(OpenApplicationLabel));
    }

    private bool CanConnect()
    {
        return _userAuthenticator.IsLoggedIn
            && _connectionManager.IsDisconnected;
    }

    private bool CanDisconnect()
    {
        return _userAuthenticator.IsLoggedIn
            && _connectionManager.IsConnected;
    }

    private void InvalidateTray()
    {
        ConnectCommand.NotifyCanExecuteChanged();
        DisconnectCommand.NotifyCanExecuteChanged();

        OnPropertyChanged(nameof(IconSource));
    }
}